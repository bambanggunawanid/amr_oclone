# Robot configuration parameters
# controller_frequency: 5.0
DWAPlannerROS:
  acc_lim_x: 2.5 #The x acceleration limit of the robot in meters/sec^2
  acc_lim_y: 0.0 #The y acceleration limit of the robot in meters/sec^2
  acc_lim_th: 10 #The rotational acceleration limit of the robot in radians/sec^2

  max_trans_vel: 1.0 #The absolute value of the maximum translational velocity for the robot in m/s
  min_trans_vel: 0.1 #The absolute value of the minimum translational velocity for the robot in m/s

  max_vel_x: 1.2 #The maximum x velocity for the robot in m/s.
  min_vel_x: -0.2 #The minimum x velocity for the robot in m/s, negative for backwards motion.
  max_vel_y: 0.1 #The maximum y velocity for the robot in m/s
  min_vel_y: -0.1 #The minimum y velocity for the robot in m/s

  max_rot_vel: 1.0 #The absolute value of the maximum rotational velocity for the robot in rad/s
  min_rot_vel: 0.2 #The absolute value of the minimum rotational velocity for the robot in rad/s

  xy_goal_tolerance: 0.2 #The tolerance in meters for the controller in the x & y distance when achieving a goal
  yaw_goal_tolerance: 3.14 #The tolerance in radians for the controller in yaw/rotation when achieving its goal
  latch_xy_goal_tolerance: true #If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.

  holonomic_robot: false # declare, is robot holonomic or not

  # # Trajectory scoring parameters
  path_distance_bias: 32.0 # The weighting for how much the controller should stay close to the path it was given
  goal_distance_bias: 24.0 # The weighting for how much the controller should attempt to reach its local goal, also controls speed
  occdist_scale: 10 # The weighting for how much the controller should attempt to avoid obstacles
  forward_point_distance: 0.325 # The distance from the center point of the robot to place an additional scoring point, in meters
  stop_time_buffer: 0.2 # The amount of time that the robot must stThe absolute value of the veolicty at which to start scaling the robot's footprint, in m/sop before a collision in order for a trajectory to be considered valid in seconds
  scaling_speed: 0.25 # The absolute value of the veolicty at which to start scaling the robot's footprint, in m/s
  max_scaling_factor: 0.2 # The maximum factor to scale the robot's footprint by
  oscillation_reset_dist: 0.25 #How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)

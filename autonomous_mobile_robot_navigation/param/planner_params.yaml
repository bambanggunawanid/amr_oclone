# controller_frequency: 1.0
recovery_behavior_enabled: false
conservative_reset_dist: 0.2

# GLOBAL PLAN
NavfnROS:
  allow_unknown: false
  default_tolerance: 0.1

# SrvClientPlugin:
#   allow_unknown: true
#   default_tolerance: 0.1

# GlobalPlanner: # Also see: http://wiki.ros.org/global_planner
#   old_navfn_behavior: false # Exactly mirror behavior of navfn, use defaults for other boolean parameters, default false
#   use_quadratic: true # Use the quadratic approximation of the potential. Otherwise, use a simpler calculation, default true
#   use_dijkstra: true # Use dijkstra's algorithm. Otherwise, A*, default true
#   use_grid_path: true # Create a path that follows the grid boundaries. Otherwise, use a gradient descent method, default false

#   allow_unknown:
#     true # Allow planner to plan through unknown space, default true
#     # Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
#   planner_window_x: 0.0 # default 0.0
#   planner_window_y: 0.0 # default 0.0
#   default_tolerance: 0.0 # If goal in obstacle, plan to the closest point in radius default_tolerance, default 0.0

#   publish_scale: 100 # Scale by which the published potential gets multiplied, default 100
#   planner_costmap_publish_frequency: 0.0 # default 0.0

#   lethal_cost: 253 # default 253
#   neutral_cost: 50 # default 50
#   cost_factor: 3.0 # Factor to multiply each cost from costmap by, default 3.0
#   publish_potential: true # Publish Potential Costmap (this is not like the navfn pointcloud2 potential), default true

# LOCAL PLAN
DWAPlannerROS:
  # Robot configuration parameters
  acc_lim_x: 10
  acc_lim_y: 0
  acc_lim_th: 3.4

  max_vel_x: 1.2
  min_vel_x: -0.2
  max_vel_y: 0
  min_vel_y: 0

  max_vel_trans: 0.2
  min_vel_trans: 0.05
  max_vel_theta: 1.0
  min_vel_theta: 0.2

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.1
  xy_goal_tolerance: 0.2
  latch_xy_goal_tolerance: false

  # # Forward Simulation Parameters
  # sim_time: 2.0
  # sim_granularity: 0.02
  # vx_samples: 6
  # vy_samples: 0
  # vtheta_samples: 20
  # penalize_negative_x: true

  # # Trajectory scoring parameters
  # path_distance_bias: 32.0 # The weighting for how much the controller should stay close to the path it was given
  # goal_distance_bias: 24.0 # The weighting for how much the controller should attempt to reach its local goal, also controls speed
  occdist_scale: 10 # The weighting for how much the controller should attempt to avoid obstacles
  # forward_point_distance: 0.325 # The distance from the center point of the robot to place an additional scoring point, in meters
  # stop_time_buffer: 0.2  # The amount of time that the robot must stThe absolute value of the veolicty at which to start scaling the robot's footprint, in m/sop before a collision in order for a trajectory to be considered valid in seconds
  # scaling_speed: 0.25 # The absolute value of the veolicty at which to start scaling the robot's footprint, in m/s
  # max_scaling_factor: 0.2 # The maximum factor to scale the robot's footprint by

  # # Oscillation Prevention Parameters
  # oscillation_reset_dist: 0.25 #How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)

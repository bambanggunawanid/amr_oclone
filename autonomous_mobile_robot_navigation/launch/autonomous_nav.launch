<?xml version="1.0"?>
<launch>
  <!-- Desclare launch rviz first -->
  <arg name="use_rviz" default="true"/>
  <param name="/use_sim_time" value="false"/>

  <!-- Static transformation for TF -->
  <node pkg="tf" type="static_transform_publisher" name="base_laser_broadcaster" args="0 0.06 0.02 0 0 0 base_link laser 100" />
  <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 0.06 0.02 0 0 0 base_link imu 100" />
  <node pkg="tf" type="static_transform_publisher" name="dummy_broadcaster" args="0 0 0 0 0 0 base_link dummy 100" />
  <node pkg="tf" type="static_transform_publisher" name="caster_broadcaster" args="0 0 0 0 0 0 base_link caster_wheel 100" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 100" />

  <!-- map to odom will be provided by the AMCL -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom_combined 100" />

  <!-- Hoverboard usb port -->
  <param name="port" type="str" value="/dev/ttyHOVER"/>

  <!-- Run RPLIDAR and IMU driver launch -->
  <include file="$(find hoverboard_driver)/launch/hoverboard.launch" />
  <include file="$(find rplidar_ros)/launch/rplidar.launch" />
  <include file="$(find mpu6050_driver)/launch/mpu6050_driver.launch" />

  <!-- Desclare map file -->
  <arg name="map_file" default="$(find autonomous_mobile_robot_navigation)/maps/basemen_g_per4_niceeeee_perfecttoooooo.yaml"/>
  <!-- <arg name="map_file" default="$(find autonomous_mobile_robot_navigation)/maps/lab.yaml"/> -->

  <!-- Robot model urdf -->
  <arg name="model" default="$(find autonomous_mobile_robot_navigation)/urdf/mobile_robot_v2.xacro"/>
  <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />

  <!-- Robot join state -->
  <rosparam file="$(find autonomous_mobile_robot_navigation)/config/joint_limits.yaml" command="load"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <!-- Rviz config param declare -->
  <!-- Subscribe:  -->
  <!-- Publish:  -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find autonomous_mobile_robot_navigation)/rviz/nav_config.rviz"/>

  <!-- Map server -->
  <!-- Subscribe: /map -->
  <!-- Publish: /map, /map_metadata -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" respawn="true" />

  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <remap from="odom" to="/hoverboard_velocity_controller/odom" />
  <remap from="imu" to="/imu/data" />
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom_combined"/>
    <param name="base_footprint_frame" value="base_footprint"/>
    <param name="freq" value="100.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>

  <!-- Add AMCL example for differential drive robots for Localization -->
  <!-- Subscribe: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  <node pkg="amcl" type="amcl" name="amcl" output="screen">
    <remap from="scan" to="scan"/>
    <param name="odom_frame_id" value="odom_combined"/>
    <param name="odom_model_type" value="diff-corrected"/>
    <param name="base_frame_id" value="base_link"/>
    <param name="update_min_d" value="0.1"/>
    <param name="update_min_a" value="0.2"/>
    <param name="min_particles" value="500"/>
    <param name="global_frame_id" value="map"/>
    <param name="tf_broadcast" value="true" />
    <param name="initial_pose_x" value="0.0"/>
    <param name="initial_pose_y" value="0.0"/>
    <param name="initial_pose_a" value="0.0"/>
  </node>

  <!-- Activated Dijkstra (commented if doesn't used)-->
  <!-- <node pkg="unit2_pp" name="dijkstra_solution" type="unit2_solution_server.py" output="screen"/> -->

  <!-- Import move base -->
  <arg name="scan_topic" default="/scan"/>
  <arg name="cmd_vel_topic" default="/hoverboard_velocity_controller/cmd_vel"/>
  <arg name="odom_topic" default="/odom_combined"/>

  <!-- Global path planner -->
  <arg name="base_global_planner" default="navfn/NavfnROS"/>
  <!-- <arg name="base_global_planner" default="srv_client_plugin/SrvClientPlugin"/> -->
  <!-- <arg name="base_global_planner" default="global_planner/GlobalPlanner"/> -->

  <!-- Local path planner -->
  <arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

    <param name="base_global_planner" value="$(arg base_global_planner)"/>
    <param name="base_local_planner" value="$(arg base_local_planner)"/>

    <!-- Costmap params -->
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/local_costmap_params.yaml" command="load" />

    <!-- Global & Local Planner -->
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/local_planner_params.yaml" command="load"/>
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/global_planner_params.yaml" command="load"/>

    <!-- Remap possition -->
    <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    <remap from="odom" to="$(arg odom_topic)"/>
    <remap from="scan" to="$(arg scan_topic)"/>
  </node>
</launch>

<?xml version="1.0"?>
<launch>
    <!-- Static transformation for TF -->
    <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 100" />

    <!-- Sensor -->
    <node pkg="tf" type="static_transform_publisher" name="base_laser_broadcaster" args="0 0.06 0.02 0 0 0 base_link laser 100" />
    <node pkg="tf" type="static_transform_publisher" name="base_imu_broadcaster" args="0 0.06 0.02 0 0 0 base_link imu 100" />
    <node pkg="tf" type="static_transform_publisher" name="base_dummy_broadcaster" args="0 0 0 0 0 0 base_link dummy 100" />
    <node pkg="tf" type="static_transform_publisher" name="base_caster_broadcaster" args="0 0 0 0 0 0 base_link wheel_caster 100" />

    <!-- Rviz config param declare -->
    <arg name="use_rviz" default="true"/>
    <!-- Subscribe:  -->
    <!-- Publish:  -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find autonomous_mobile_robot_navigation)/rviz/nav_config.rviz"/>

    <!-- Run RPLIDAR and IMU driver launch -->
    <include file="$(find rplidar_ros)/launch/rplidar.launch" />
    <include file="$(find mpu6050_driver)/launch/mpu6050_driver.launch" />
    <include file="$(find autonomous_mobile_robot_navigation)/launch/hoverboard.launch" />

    <!-- Robot model urdf -->
    <arg name="model" default="$(find autonomous_mobile_robot_navigation)/urdf/mobile_robot_v2.xacro"/>
    <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />

    <!-- Robot join state -->
    <rosparam file="$(find autonomous_mobile_robot_navigation)/config/joint_limits.yaml" command="load"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <!-- Desclare map file -->
    <arg name="map_file" default="$(find autonomous_mobile_robot_navigation)/maps/lab.yaml"/>

    <!-- Map server -->
    <!-- Subscribe: /map -->
    <!-- Publish: /map, /map_metadata -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
        <param name="frame_id" value="map"/>
    </node>

    <!-- Extended Kalman Filter from robot_pose_ekf Node-->
    <!-- Subscribe: /odom, /imu_data, /vo -->
    <!-- Publish: /robot_pose_ekf/odom_combined -->
    <remap from="odom" to="/hoverboard_velocity_controller/odom" />
    <remap from="imu" to="/imu/data" />
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <param name="output_frame" value="odom"/>
        <param name="base_footprint_frame" value="base_footprint"/>
        <param name="freq" value="100.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="odom_used" value="true"/>
        <param name="imu_used" value="true"/>
        <param name="vo_used" value="false"/>
        <param name="gps_used" value="false"/>
        <param name="debug" value="false"/>
        <param name="self_diagnose" value="false"/>
    </node>

    <!-- Add AMCL example for differential drive robots for Localization -->
    <!-- Subscribe: /scan, /tf, /initialpose, /map -->
    <!-- Publish: /amcl_pose, /particlecloud, /tf -->
    <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <param name="use_sim_time" value="false"/>
        <param name="use_map_topic" value="true"/>
        <param name="odom_frame_id" value="odom"/>
        <param name="odom_model_type" value="diff-corrected"/>
        <param name="base_frame_id" value="base_link"/>
        <param name="update_min_d" value="0.2"/>
        <param name="update_min_a" value="0.5"/>
        <param name="min_particles" value="500"/>
        <param name="global_frame_id" value="map"/>
        <param name="tf_broadcast" value="true" />
        <param name="initial_pose_x" value="0.0"/>
        <param name="initial_pose_y" value="0.0"/>
        <param name="initial_pose_a" value="0.0"/>
        <remap from="scan" to="/scan"/>
    </node>

    <!-- Subscribe: /initialpose, /move_base_simple/goal -->
  <!-- Publish: /initial_2d, /goal_2d -->
  <!-- <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d"></node> -->

  <!-- Move Base Node -->
  <!-- Subscribe: /tf, /map, /scan, /odom, /move_base_simple/goal -->
  <!-- Publish: /cmd_vel -->
  <remap from="cmd_vel" to="/hoverboard_velocity_controller/cmd_vel"/>
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/base_local_planner_params.yaml" command="load" />
    <rosparam file="$(find autonomous_mobile_robot_navigation)/param/move_base_params.yaml" command="load" />
  </node>
</launch>